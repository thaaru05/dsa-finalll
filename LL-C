#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the circular linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node with given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        exit(EXIT_FAILURE);
    }
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to add a node at the end of the circular linked list
void addLast(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head; // Make it circular
        return;
    }
    struct Node* temp = *head;
    while (temp->next != *head) {
        temp = temp->next;
    }
    temp->next = newNode;
    newNode->next = *head; // Make it circular
}

// Function to add a node in the middle of the circular linked list
void addMiddle(struct Node* prevNode, int data) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL\n");
        return;
    }
    struct Node* newNode = createNode(data);
    newNode->next = prevNode->next;
    prevNode->next = newNode;
}

// Function to remove a node with given data from the circular linked list
void removeNode(struct Node** head, int data) {
    if (*head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node* temp = *head, *prev = NULL;

    // If the node to be deleted is the only node
    if (temp->data == data && temp->next == *head) {
        free(temp);
        *head = NULL;
        return;
    }

    // Find the node to be deleted and the previous node
    do {
        prev = temp;
        temp = temp->next;
    } while (temp != *head && temp->data != data);

    // If the node is not present
    if (temp == *head && temp->data != data) {
        printf("Node with data %d not found\n", data);
        return;
    }

    // If the node to be deleted is the head
    if (temp == *head) {
        prev->next = temp->next;
        *head = temp->next;
    } else {
        prev->next = temp->next;
    }

    // Free the memory of the deleted node
    free(temp);
}

// Function to traverse the circular linked list and perform some operation on each node
void traverseAndDisplay(struct Node* head) {
    if (head == NULL) {
        printf("List is empty\n");
        return;
    }

    struct Node* temp = head;

    do {
        printf("%d -> ", temp->data);
        // You can perform some operation on each node here
        temp = temp->next;
    } while (temp != head);

    printf("Head\n");
}

// Function to display the circular linked list
void displayList(struct Node* head) {
    printf("Circular Linked List: ");
    traverseAndDisplay(head);
}

// Function to add a node at the beginning of the circular linked list
void addFirst(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode;
        newNode->next = *head; // Make it circular
        return;
    }

    struct Node* last = *head;
    while (last->next != *head) {
        last = last->next;
    }

    newNode->next = *head;
    last->next = newNode;
    *head = newNode;
}

// Example usage
int main() {
    // Initialize an empty circular linked list
    struct Node* head = NULL;

    // Add nodes at the last
    addLast(&head, 3);
    addLast(&head, 7);
    addLast(&head, 1);

    // Display the circular linked list
    displayList(head);

    // Add a node at the first
    addFirst(&head, 5);

    // Display the circular linked list
    displayList(head);

    // Add a node in the middle after the node with data 7
    addMiddle(head->next, 9);

    // Display the circular linked list
    displayList(head);

    // Remove the node with data 7
    removeNode(&head, 7);

    // Display the circular linked list
    displayList(head);

    return 0;
}
